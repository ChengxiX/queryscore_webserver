#lang racket
(require web-server/servlet
         web-server/servlet-env)
(require web-server/managers/none)
(require web-server/formlets)
(require web-server/http/basic-auth)
(require web-server/http/id-cookie)

(require "model.rkt")
(require "formlets.rkt")


(require crypto)
(require crypto/all)
(use-all-factories!)

;更改了全局(response/xexprh5)的行为为html5
(define (response/xexprh5 xexpr #:code [code 200] #:message [message #f] #:seconds [seconds (current-seconds)] #:mime-type [mime-type TEXT/HTML-MIME-TYPE] #:cookies [cooks empty] #:headers [hdrs empty] #:preamble [preamble #""])
  (response/xexpr xexpr #:code code	#:message message	#:seconds seconds	#:mime-type mime-type	#:headers hdrs	#:cookies cooks #:preamble (bytes-append #"<!DOCTYPE html>" preamble)))


(define (base title body)
  `(html (head (meta ((charset "UTF-8")))
  (meta ((name "viewport") (content "width=device-width, initial-scale=1, shrink-to-fit=no")))
  (link ((rel "stylesheet") (href "https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.6.1/css/bootstrap.min.css")))
               (title ,(string-append title " - RDFZ社联在线系统")))
         (body ,@body 
         (script ((src "https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.slim.js")))
         (script ((src "https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.6.1/js/bootstrap.min.js")))
         )))

(define (homepage request)
  (define (render-homepage embed/url)
    (response/xexprh5 (base "首页" `((h1 "首页") (p "欢迎使用RDFZ社联在线系统") (a ((href ,(embed/url login))) "登录")))))
  (send/suspend/dispatch render-homepage))

(define secret-salt (make-secret-salt/file (build-path PATH "secret-salt.bin")))

(define (login request)
  (define (login-handler request)
    (define-values (username password remember?) (formlet-process login-form request))
    (match (cons username password)
      [(cons user pass) #:when (let ((realpass (user-password user))) (if realpass (pwhash-verify #f (string->bytes/utf-8 pass) realpass) #f))
                        (send/suspend/dispatch (lambda (embed/url) (response/xexprh5 `(html (head (meta ((http-equiv "refresh") (content ,(string-append "0;url=" (embed/url (if (member "admin" (user-club user)) admin query))))))))
                                                                                   #:cookies (list (if (equal? remember? "t") (make-id-cookie "identity" user #:key secret-salt #:max-age 604800) (make-id-cookie "identity" user #:key secret-salt))))))]
      [else (login (redirect/get))]))
  (let ((id (request-id-cookie request #:name "identity" #:key secret-salt #:shelf-life 604800)))
    (if id
        (if (member "admin" (user-club id)) (admin (redirect/get)) (query (redirect/get)))
        (send/suspend/dispatch (lambda (embed/url) (response/xexprh5 (base "登录" `((div ((class "container")) (h1 "登录") (form ([action ,(embed/url login-handler)]) ,@(formlet-display login-form))))))))
        )))

(define (admin request #:alert (callback #f)) ;callback is a test
  (define (after-auth request next) (let ((id (request-id-cookie request #:name "identity" #:key secret-salt #:shelf-life 604800))) (if (if id (member "admin" (user-club id)) #f) (next request)
                                                                                                                                       (send/suspend/dispatch (lambda (embed/url) (response/xexprh5 (base "无权限" `((h1 "无权限") (p "您不是管理员") (a ((href ,(embed/url login))) "登录") (a ((href ,(embed/url homepage))) "首页")))))))))
  (define (render-admin embed/url)
    (response/xexprh5 (base "管理面板" `(
      (div ((class "container"))
      ,(if callback `(div ((class ,(format "alert alert-~a alert-dismissible fade show" (first callback)))) (botton ((type "button") (class "close") (data-dismiss "alert")) times) (strong ,(second callback)) ,(third callback)) "")
      (div ((class "row")) (div ((class "offset-md-2")) (h1 "管理面板")
                                        (h2 "用户")
                                        (form ([action ,(embed/url call-get-user)])
                                              ,@(formlet-display get-user) )
                                        (form ([action ,(embed/url call-add-user)])
                                              ,@(formlet-display add-user) )
                                        (form ([action ,(embed/url call-update-user)])
                                              ,@(formlet-display update-user) )
                                        (form ([action ,(embed/url call-delete-user)])
                                              ,@(formlet-display delete-user) )
                                        (form ([action ,(embed/url call-club-add-user)])
                                              ,@(formlet-display update-user-add-club) )
                                        (form ([action ,(embed/url call-club-rm-user)])
                                              ,@(formlet-display update-user-rm-club) )
                                        (h2 "社团")
                                        (form ([action ,(embed/url call-get-club)])
                                              ,@(formlet-display get-club) )
                                        (form ([action ,(embed/url call-add-club)])
                                              ,@(formlet-display add-club) )
                                        (form ([action ,(embed/url call-update-club)])
                                              ,@(formlet-display update-club) )
                                        (form ([action ,(embed/url call-delete-club)])
                                              ,@(formlet-display delete-club) )
                                        (h2 "积分")
                                        (form ([action ,(embed/url call-add-log)])
                                              ,@(formlet-display add-log) )
                                        (form ([action ,(embed/url add-log-change-call)])
                                              ,@(formlet-display add-log-change) )
                                        (form ([action ,(embed/url call-get-logs)])
                                              ,@(formlet-display get-logs) )))
                                        )))))
  (define (call-get-user request)
    (after-auth request (lambda (request) (define-values (name club) (formlet-process get-user request))
                          (response/xexprh5 (base "查询用户结果" `((h1 "查询用户结果")
                                                                ,(cond 
                                                                ((and (equal? club "") (equal? name "")) (let ((res (user-get-all))) (table-render "用户名" "社团" (car res) (cdr res))))
                                                                ((equal? club "") (let ((res (user-club name))) (table-render "用户名" "社团" (make-list (length res) name) res)))
                                                                ((equal? name "") (let ((res (club-user club))) (table-render "社团" "用户名" (make-list (length res) club) res)))
                                                                (else (let ((res (user-club name))) (table-render "用户名" "社团" (make-list (length res) name) res)))
                                                                )
                                                                   ))))))
  (define (call-get-club request)
    (after-auth request (lambda (request) (response/xexprh5 (base "所有社团" `((h1 "所有社团")
                                                                              ,(let ((res (club-all))) (table-render "社团" "积分" (car res) (map number->string (cdr res))))
                                                                              ))))))
  (define (call-get-logs request)
    (after-auth request (lambda (request) (define-values (club) (formlet-process get-logs request))
                          (response/xexprh5 (base "查询积分记录结果" `((h1 "查询积分记录结果")
                                                                  ,(let ((res (log-*-byclub club))) (table-render-4 "社团" "备注" "积分" "记录时间" (first res) (second res) (map number->string (third res)) (fourth res)))))))))
  (define (call-add-user request)
    (after-auth request (lambda (request) (define-values (name password club) (formlet-process add-user request))
                          (if (or (equal? name "") (equal? password ""))
                          (admin (redirect/get) #:alert '("warning" "警告！" "请输入用户名或者密码"))
                          (begin (user-insert! name (string-split club ",") (pwhash 'scrypt (string->bytes/utf-8 password) `((ln , (inexact->exact (+ 1 (round (* (random) 10)))))))) (admin (redirect/get) #:alert '("success" "成功！" "")))))
                          ))
  (define (call-update-user request)
    (after-auth request (lambda (request) (define-values (name newname password) (formlet-process update-user request))
    (if (equal? name "") (admin (redirect/get) #:alert '("warning" "警告！" "请输入用户名"))
    (cond
    ((not (or (equal? newname "") (equal? password ""))) (user-rename! name newname) (user-repassword! name (pwhash 'scrypt (string->bytes/utf-8 password) `((ln , (inexact->exact (+ 1 (round (* (random) 10)))))))) (admin (redirect/get)))
    ((and (equal? newname "") (equal? password "")) (admin (redirect/get) #:alert '("warning" "警告！" "请输入新的用户名或者密码")))
                          ((not (equal? newname "")) (user-rename! name newname) (admin (redirect/get) #:alert '("success" "成功！" "")))
                          ((not (equal? password "")) (user-repassword! name (pwhash 'scrypt (string->bytes/utf-8 password) `((ln , (inexact->exact (+ 1 (round (* (random) 10)))))))) (admin (redirect/get) #:alert '("success" "成功！" "")))
)))))
  (define (call-club-add-user request)
    (after-auth request (lambda (request) (define-values (user club) (formlet-process update-user-add-club request))
                        (if (not (or (equal? user "") (equal? club "")))
                          (begin (map (lambda (c) (user-add-club! user c)) (string-split club ","))
                          (admin (redirect/get) #:alert '("success" "成功！" "")))
                          (admin (redirect/get) #:alert '("warning" "警告！" "请输入用户名或者社团名"))
                          ))))
  (define (call-club-rm-user request)
    (after-auth request (lambda (request) (define-values (user club) (formlet-process update-user-rm-club request))
                        (if (not (or (equal? user "") (equal? club "")))
                          (begin (map (lambda (c) (user-rm-club! user c)) (string-split club ","))
                          (admin (redirect/get) #:alert '("success" "成功！" "")))
                          (admin (redirect/get) #:alert '("warning" "警告！" "请输入用户名或者社团名"))
                          )
                          )))
  (define (call-delete-user request)
    (after-auth request (lambda (request) (define-values (name) (formlet-process delete-user request))
                          (if (equal? name "") (admin (redirect/get) #:alert '("warning" "警告！" "请输入用户名")) 
                          (begin (user-delete! name)
                          (admin (redirect/get) #:alert '("success" "成功！" "")))))))
  (define (call-add-club request)
    (after-auth request (lambda (request) (define-values (name score) (formlet-process add-club request))
                          
                          (if (equal? name "")
                          (admin (redirect/get) #:alert '("warning" "警告！" "请输入社团名"))
                          (begin (club-insert! name (if (equal? score "") 0 (string->number score))) (admin (redirect/get) #:alert '("success" "成功！" ""))))
                          )))
  (define (call-update-club request)
    (after-auth request (lambda (request) 
                          (define-values (name newname) (formlet-process update-club request))
                          (if (or (equal? name "") (equal? newname "")) (admin (redirect/get) #:alert '("warning" "警告！" "请输入社团名和新社团名")) (begin (club-rename! name newname) (admin (redirect/get)#:alert '("success" "成功！" ""))))
                          )))
  (define (call-delete-club request)
    (after-auth request (lambda (request)
                          (define-values (name) (formlet-process delete-club request))
                          (if (equal? name "") (admin (redirect/get) #:alert '("warning" "警告！" "请输入社团名")) (begin (club-delete! name) (admin (redirect/get) #:alert '("success" "成功！" ""))))
                          )))
  (define (call-add-log request)
    (after-auth request (lambda (request) (define-values (name score comment) (formlet-process add-log request))
                          (if (or (equal? name "") (equal? score "")) (admin (redirect/get) #:alert '("warning" "警告！" "请输入社团名和分数")) (begin (log-insert! name comment (string->number score)) (admin (redirect/get) #:alert '("success" "成功！" ""))))
                          )))
  (define (add-log-change-call request)
    (after-auth request (lambda (request) (define-values (name score-change comment) (formlet-process add-log-change request))
                          (if (or (equal? name "") (equal? score "")) (admin (redirect/get) #:alert '("warning" "警告！" "请输入社团名和分数")) (begin (log-insert! name (string-append score-change "," comment) (+ (club-score club) (string->number score-change))) (admin (redirect/get) #:alert '("success" "成功！" ""))))
                          )))
  (after-auth request (lambda (request) (send/suspend/dispatch render-admin))))

(define (table-render title1 title2 cell1 cell2) `(table ((class "table table-striped table-bordered table-hover table-condensed")) (thead (tr (th ,title1) (th ,title2))) (tbody ,@(map (lambda (a b) `(tr(td ,a) (td ,b))) cell1 cell2))))

(define (table-render-4 title1 title2 title3 title4 cell1 cell2 cell3 cell4) `(table ((class "table table-striped table-bordered table-hover table-condensed")) (thead (tr (th ,title1) (th ,title2) (th ,title3) (th ,title4))) (tbody ,@(map (lambda (a b c d) `(tr(td ,a) (td ,b) (td ,c) (td ,d))) cell1 cell2 cell3 cell4))))

(define (query request)
  (define (render-query embed/url)
    (response/xexprh5 (base "社团详细" `((h1 "社团详细") ,@(map (lambda (club) `(div (h2 ,club) (p ,(string-append "当前积分:" (number->string (club-score club)))) ,(let ((res (log-*-byclub club))) (table-render-4 "社团" "备注" "积分" "记录时间" (first res) (second res) (map number->string (third res)) (fourth res))))) (user-club (request-id-cookie request #:name "identity" #:key secret-salt #:shelf-life 604800)) )))))
  (send/suspend/dispatch render-query))

;run
(serve/servlet homepage #:command-line? #t #:servlet-path "/" #:port 8080 #:listen-ip #f)