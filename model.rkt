#lang racket
(require db)

;(init-db! is outdate)
;(define (init-db!)
  ;(define db (mysql-connect #:user "cu" #:password "myweb" #:port 8806 #:database "clubunion" #:ssl 'yes))
  ;(unless (table-exists? db "users")
    ;(query-exec-safeconnection db "CREATE TABLE users(name VARCHAR(64) PRIMARY KEY, password TINYBLOB)"))
  ;(unless (table-exists? db "clubs")
    ;(query-exec-safeconnection db "CREATE TABLE clubs(name VARCHAR(64) PRIMARY KEY, score INTEGER)")
    ;(query-exec-safeconnection db "INSERT INTO clubs VALUES ('admin', ?)" 0))
  ;(unless (table-exists? db "changinglogs")
    ;(query-exec-safeconnection db "CREATE TABLE changinglogs(id INTEGER AUTO_INCREMENT PRIMARY KEY, club VARCHAR(64), FOREIGN KEY(club) REFERENCES clubs(name), comment TEXT, result INTEGER, logtime TIMESTAMP default CURRENT_TIMESTAMP)"))
  ;(unless (table-exists? db "user2club")
    ;(query-exec-safeconnection db "CREATE TABLE user2club(user VARCHAR(64), club VARCHAR(64), FOREIGN KEY(user) REFERENCES users(name), FOREIGN KEY(club) REFERENCES clubs(name), PRIMARY KEY (user, club))"))
  ;db)

(define current-db (make-parameter null))

(define (connect) (current-db (mysql-connect #:user "cu" #:password "j6ChJLUK0F*XCC&&h" #:port 8806 #:database "clubunion" #:ssl 'yes)))
(connect)

(define (query-exec-safeconnection stmt . arg) (with-handlers ([exn:fail:sql? (lambda (exn) (if (connected? (current-db)) (error exn) (connect)) (apply query-exec (cons (current-db) (cons stmt arg))))]) (apply query-exec (cons (current-db) (cons stmt arg)))))
(define (query-list-safeconnection stmt . arg) (with-handlers ([exn:fail:sql? (lambda (exn) (if (connected? (current-db)) (error exn) (connect)) (apply query-list (cons (current-db) (cons stmt arg))))]) (apply query-list (cons (current-db) (cons stmt arg)))))
(define (query-maybe-value-safeconnection stmt . arg) (with-handlers ([exn:fail:sql? (lambda (exn) (if (connected? (current-db)) (error exn) (connect)) (apply query-maybe-value (cons (current-db) (cons stmt arg))))]) (apply query-maybe-value (cons (current-db) (cons stmt arg)))))


;(struct user (name password)) and password is hashed
;(struct user2club (user club))

(define (user-get-all)
  (let ((users (query-list-safeconnection  "SELECT name FROM users ORDER BY name"))) (cons users (map (lambda (user) (string-join (user-club user) ",")) users))))

(define (user-password name)
  (query-maybe-value-safeconnection  "SELECT password FROM users WHERE name = ?" name))
(define (user-insert! name clubs password);get a list of clubs
  (query-exec-safeconnection  "INSERT INTO users VALUES (?, ?)" name password)
  (map (lambda (c) (query-exec-safeconnection  "INSERT INTO user2club VALUES (?, ?)" name c)) clubs))
(define (user-rename! name newname)
  (query-exec-safeconnection  "UPDATE users SET name=? WHERE name=?" newname name))
(define (user-repassword! name password)
  (query-exec-safeconnection  "UPDATE users SET password=? WHERE name=?" password name))
(define (user-delete! name)
  (query-exec-safeconnection  "DELETE FROM users WHERE name=?" name)
  (query-exec-safeconnection  "DELETE FROM user2club WHERE user=?" name))
(define (user-rm-club! name club)
  (query-exec-safeconnection  "DELETE FROM user2club WHERE name=? AND club=?" name club))
(define (user-add-club! name club)
  (query-exec-safeconnection  "INSERT INTO user2club VALUES (?, ?)" name club))

(define (user-club name)
  (query-list-safeconnection  "SELECT club FROM user2club WHERE user = ? ORDER BY club" name))
(define (club-user name)
  (query-list-safeconnection  "SELECT user FROM user2club WHERE club = ? ORDER BY user" name))


;(struct club (name score))
(define (club-score name)
  (query-maybe-value-safeconnection  "SELECT score FROM clubs WHERE name = ?" name))
(define (club-rescore! name score)
  (query-exec-safeconnection  "UPDATE clubs SET score=? WHERE name=?" score name))
(define (club-insert! name score)
  (query-exec-safeconnection  "INSERT INTO clubs VALUES (?, ?)" name score))
(define (club-all) (cons (query-list-safeconnection  "SELECT name FROM clubs ORDER BY score, name DESC")
                         (query-list-safeconnection  "SELECT score FROM clubs ORDER BY score, name DESC")))

(define (club-rename! name newname)
  (query-exec-safeconnection  "UPDATE clubs SET name=? WHERE name=?" newname name)
  (query-exec-safeconnection  "UPDATE user2club SET club=? WHERE club=?"newname name))
(define (club-delete! name)
  (query-exec-safeconnection  "DELETE FROM clubs WHERE name=?" name)
  (query-exec-safeconnection  "DELETE FROM user2club WHERE club=?" name))

;(struct log (id club comment result logtime))
(define (log-*-byclub club)
  (if (equal? club "")
      (list (query-list-safeconnection  "SELECT club FROM changinglogs ORDER BY logtime DESC")
            (query-list-safeconnection  "SELECT comment FROM changinglogs ORDER BY logtime DESC")
            (query-list-safeconnection  "SELECT result FROM changinglogs ORDER BY logtime DESC")
            (map (lambda (stamp) (string-append (number->string (sql-timestamp-year stamp)) "年" (number->string (sql-timestamp-month stamp)) "月" (number->string (sql-timestamp-day stamp)) "日" (number->string (sql-timestamp-hour stamp)) "时" (number->string (sql-timestamp-minute stamp)) "分" (number->string (sql-timestamp-second stamp)) "秒")) (query-list-safeconnection  "SELECT logtime FROM changinglogs ORDER BY logtime DESC")))
      (list (query-list-safeconnection  "SELECT club FROM changinglogs WHERE club=? ORDER BY logtime DESC" club)
            (query-list-safeconnection  "SELECT comment FROM changinglogs WHERE club=? ORDER BY logtime DESC" club)
            (query-list-safeconnection  "SELECT result FROM changinglogs WHERE club=? ORDER BY logtime DESC" club)
            (map (lambda (stamp) (string-append (number->string (sql-timestamp-year stamp)) "年" (number->string (sql-timestamp-month stamp)) "月" (number->string (sql-timestamp-day stamp)) "日" (number->string (sql-timestamp-hour stamp)) "时" (number->string (sql-timestamp-minute stamp)) "分" (number->string (sql-timestamp-second stamp)) "秒")) (query-list-safeconnection  "SELECT logtime FROM changinglogs WHERE club=? ORDER BY logtime DESC" club))
            )))
(define (log-insert! club comment result)
  (query-exec-safeconnection  "INSERT INTO changinglogs (club, comment, result) VALUES (?, ?, ?)" club comment result)
  (club-rescore! club result))
(define (log-change! club comment change)
  (log-insert! club (string-append (number->string change) comment) (+ (club-score club) change)))

(provide (all-defined-out))