#lang racket
(require db)

(define PATH (current-directory-for-user)) ;can be set manually

(define (init-db! home)
  (define db (sqlite3-connect #:database home #:mode 'create))
  (unless (table-exists? db "users")
    (query-exec db "CREATE TABLE users (name TEXT PRIMARY KEY, club TEXT, password BLOB)"))
  (unless (table-exists? db "clubs")
    (query-exec db "CREATE TABLE clubs (name TEXT PRIMARY KEY, score INTEGER)"))
  (unless (table-exists? db "logs")
    (query-exec db "CREATE TABLE logs (id INTEGER PRIMARY KEY AUTOINCREMENT, club TEXT, comment TEXT, result INTEGER, logtime TIMESTAMP default (datetime('now', '+8 hour')))"))
  db)
(define db (init-db! (build-path PATH "database.sqlite")))

;(struct user (name club password)) ;password is hashed
(define (user-club name)
  (query-maybe-value db "SELECT club FROM users WHERE name = ?" name))
(define (user-get (name "") (club ""))
  (cond
    ((and (equal? club "") (equal? name "")) (cons (query-list db "SELECT name FROM users ORDER BY name, club")
                                                   (query-list db "SELECT club FROM users ORDER BY name, club")))
    ((equal? club "") (query-maybe-value db "SELECT club FROM users WHERE name=?" name))
    ((equal? name "") (cons (query-list db (format "SELECT name FROM users WHERE club LIKE '%~a%' ORDER BY name, club" club))
                            (query-list db (format "SELECT club FROM users WHERE club LIKE '%~a%' ORDER BY name, club" club))))
    (else (query-maybe-value db (format "SELECT club FROM users WHERE name = ? AND  club LIKE '%~a%'" club) name))))
(define (user-password name)
  (query-maybe-value db "SELECT password FROM users WHERE name = ?" name))
(define (user-insert! name club password)
  (query-exec db "INSERT INTO users VALUES (?, ?, ?)" name club password))
(define (user-rename! name newname)
  (query-exec db "UPDATE users SET name=? WHERE name=?" newname name))
(define (user-all) (query-list db "SELECT name, club FROM users"))
(define (user-repassword! name password)
  (query-exec db "UPDATE users SET password=? WHERE name=?" password name))
(define (user-delete! name)
  (query-exec db "DELETE FROM users WHERE name=?" name))
(define (user-reclub! name club)
  (query-exec db "UPDATE users SET club=? WHERE name=?" club name))



;(struct club (name score))
(define (club-score name)
  (query-maybe-value db "SELECT score FROM clubs WHERE name = ?" name))
(define (club-rescore! name score)
  (query-exec db "UPDATE clubs SET score=? WHERE name=?" score name))
(define (club-insert! name score)
  (query-exec db "INSERT INTO clubs VALUES (?, ?)" name score))
(define (club-all) (cons (query-list db "SELECT name FROM clubs ORDER BY score, name DESC")
                         (query-list db "SELECT score FROM clubs ORDER BY score, name DESC")))

(define (club-rename! name newname)
  (query-exec db "UPDATE clubs SET name=? WHERE name=?" newname name)
  (map (lambda (original) (query-exec db "UPDATE users SET club=? WHERE name=?" (string-replace original name newname) original))
       (query-list db (format "SELECT DISTINCT club FROM users WHERE club LIKE '%~a%'" name))))

;(struct log (id club comment result logtime))
(define (log-*-byclub club)
  (if (equal? club "")
      (list (query-list db "SELECT club FROM logs ORDER BY logtime DESC")
            (query-list db "SELECT comment FROM logs ORDER BY logtime DESC")
            (query-list db "SELECT result FROM logs ORDER BY logtime DESC")
            (query-list db "SELECT logtime FROM logs ORDER BY logtime DESC"))
      (list (query-list db "SELECT club FROM logs WHERE club=? ORDER BY logtime DESC" club)
            (query-list db "SELECT comment FROM logs WHERE club=? ORDER BY logtime DESC" club)
            (query-list db "SELECT result FROM logs WHERE club=? ORDER BY logtime DESC" club)
            (query-list db "SELECT logtime FROM logs WHERE club=? ORDER BY logtime DESC" club))))
(define (log-insert! club comment result)
  (query-exec db "INSERT INTO logs (club, comment, result) VALUES (?, ?, ?)" club comment result)
  (club-rescore! club result))
(define (log-change! club comment change)
  (log-insert! club (string-append (number->string change) comment) (+ (club-score club) change)))
(provide (all-defined-out))